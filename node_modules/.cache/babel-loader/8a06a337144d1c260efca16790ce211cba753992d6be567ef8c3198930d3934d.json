{"ast":null,"code":"// src/components/Chat.js\nimport React,{useEffect,useState}from\"react\";import socket from\"../../../services/socket\";import{io}from\"socket.io-client\";import axios from\"axios\";import{base_,baseURL_}from\"../../../utils/env\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Chat=()=>{const[message,setMessage]=useState(\"\");//   const [chat, setChat] = useState([]);\nconst[senderEmail,setSenderEmail]=useState(\"\");const[receiverEmail,setReceiverEmail]=useState(\"\");const[socket,setSocket]=useState(null);const[receivedMessages,setReceivedMessages]=useState([]);useEffect(()=>{// const newSocket = io(`${base_}`);\nconst newSocket=io(\"http://localhost\");setSocket(newSocket);newSocket.emit(\"register\",senderEmail);//   socket.on('receiveMessage', (data) => {\n//     console.log('Received message:', data);\n//     displayMessage(data.senderEmail, data.message);\n// });\nnewSocket.on(\"receiveMessage\",_ref=>{let{senderEmail,message,messageId,time}=_ref;setReceivedMessages(prevMessages=>[...prevMessages,{senderEmail,message,messageId,received:false,time}]);});newSocket.on(\"messageHasBeenRead\",_ref2=>{let{messageId}=_ref2;setReceivedMessages(prevMessages=>prevMessages.map(msg=>msg.messageId===messageId?{...msg,received:true}:msg));});return()=>{newSocket.disconnect();};},[senderEmail]);const handleSendMessage=async()=>{const time=Date.now();try{const response=await axios.post(\"\".concat(baseURL_,\"/message/send\"),{senderEmail,receiverEmail,message});console.log(\"Sent message\",response.data.message);}catch(error){console.log(\"error\",error);}if(socket){socket.emit(\"sendMessage\",{senderEmail,receiverEmail,message,time:time});setReceivedMessages(prevChat=>[...prevChat,{senderEmail,message,time:time,received:false}]);setMessage(\"\");}};const sendMessageReadConfirmation=messageId=>{socket.emit(\"messageRead\",{messageId});};const handleReadConfirmation=messageId=>{// Xử lý sự kiện khi người dùng xác nhận tin nhắn đã đọc\nsendMessageReadConfirmation(messageId);};return/*#__PURE__*/ (// <div>\n//   <h1>Chat</h1>\n//   <div>\n//     <input\n//       type=\"text\"\n//       placeholder=\"Your ID\"\n//       value={senderEmail}\n//       onChange={(e) => setSenderEmail(e.target.value)}\n//     />\n//     <input\n//       type=\"text\"\n//       placeholder=\"Receiver ID\"\n//       value={receiverEmail}\n//       onChange={(e) => setReceiverEmail(e.target.value)}\n//     />\n//   </div>\n//   <div>\n//     <input\n//       type=\"text\"\n//       placeholder=\"Message\"\n//       value={message}\n//       onChange={(e) => setMessage(e.target.value)}\n//     />\n//     <button onClick={handleSendMessage}>Send</button>\n//   </div>\n//   <div>\n//     {receivedMessages.map((msg, index) => (\n//       <div key={index}>\n//         <strong>{msg.senderEmail}</strong>: {msg.message}{\" \"}\n//         {msg.received ? \"(Read)\" : \"(Unread)\"}\n//         {!msg.received && (\n//           <button onClick={() => handleReadConfirmation(msg.messageId)}>\n//             Mark as Read\n//           </button>\n//         )}\n//       </div>\n//     ))}\n//   </div>\n// </div>\n_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-messages\",children:receivedMessages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"message \".concat(msg.senderEmail===senderEmail?\"sent-message\":\"received-message\"),children:[/*#__PURE__*/_jsx(\"strong\",{children:msg.senderEmail}),\": \",msg.message,msg.received?\" (Read)\":\" (Unread)\",!msg.received&&msg.senderEmail!==senderEmail&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleReadConfirmation(msg.messageId),children:\"Mark as Read\"})]},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Your ID\",value:senderEmail,onChange:e=>setSenderEmail(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Receiver ID\",value:receiverEmail,onChange:e=>setReceiverEmail(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Message\",value:message,onChange:e=>setMessage(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,children:\"Send\"})]})]}));};export default Chat;","map":{"version":3,"names":["React","useEffect","useState","socket","io","axios","base_","baseURL_","jsx","_jsx","jsxs","_jsxs","Chat","message","setMessage","senderEmail","setSenderEmail","receiverEmail","setReceiverEmail","setSocket","receivedMessages","setReceivedMessages","newSocket","emit","on","_ref","messageId","time","prevMessages","received","_ref2","map","msg","disconnect","handleSendMessage","Date","now","response","post","concat","console","log","data","error","prevChat","sendMessageReadConfirmation","handleReadConfirmation","className","children","index","onClick","type","placeholder","value","onChange","e","target"],"sources":["/Users/trinhdai/DATA/React_Native/BigShose2/client/website/src/components/user/Chat/chat.js"],"sourcesContent":["// src/components/Chat.js\nimport React, { useEffect, useState } from \"react\";\nimport socket from \"../../../services/socket\";\nimport { io } from \"socket.io-client\";\nimport axios from \"axios\";\nimport { base_,baseURL_ } from \"../../../utils/env\";\n\nconst Chat = () => {\n  const [message, setMessage] = useState(\"\");\n  //   const [chat, setChat] = useState([]);\n  const [senderEmail, setSenderEmail] = useState(\"\");\n  const [receiverEmail, setReceiverEmail] = useState(\"\");\n  const [socket, setSocket] = useState(null);\n\n  const [receivedMessages, setReceivedMessages] = useState([]);\n\n  useEffect(() => {\n    // const newSocket = io(`${base_}`);\n    const newSocket = io(`http://localhost`);\n    setSocket(newSocket);\n    newSocket.emit(\"register\", senderEmail);\n\n    //   socket.on('receiveMessage', (data) => {\n    //     console.log('Received message:', data);\n    //     displayMessage(data.senderEmail, data.message);\n    // });\n\n    newSocket.on(\"receiveMessage\", ({ senderEmail, message, messageId,time }) => {\n      setReceivedMessages((prevMessages) => [\n        ...prevMessages,\n        { senderEmail, message, messageId, received: false,time},\n      ]);\n    });\n    newSocket.on(\"messageHasBeenRead\", ({ messageId }) => {\n      setReceivedMessages((prevMessages) =>\n        prevMessages.map((msg) =>\n          msg.messageId === messageId ? { ...msg, received: true } : msg\n        )\n      );\n    });\n\n    return () => {\n      newSocket.disconnect();\n    };\n  }, [senderEmail]);\n\n\n  const handleSendMessage = async () => {\n    const time = Date.now();\n    try {\n      const response = await axios.post(\n        `${baseURL_}/message/send`,\n        { senderEmail, receiverEmail, message }\n      );\n      console.log(\"Sent message\", response.data.message);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n\n    if (socket) {\n      socket.emit(\"sendMessage\", { senderEmail, receiverEmail, message,time: time });\n      setReceivedMessages((prevChat) => [\n        ...prevChat,\n        { senderEmail, message, time: time, received: false },\n      ]);\n      setMessage(\"\");\n    }\n  };\n  const sendMessageReadConfirmation = (messageId) => {\n    socket.emit(\"messageRead\", { messageId });\n  };\n  const handleReadConfirmation = (messageId) => {\n    // Xử lý sự kiện khi người dùng xác nhận tin nhắn đã đọc\n    sendMessageReadConfirmation(messageId);\n  };\n\n\n  return (\n    // <div>\n    //   <h1>Chat</h1>\n    //   <div>\n    //     <input\n    //       type=\"text\"\n    //       placeholder=\"Your ID\"\n    //       value={senderEmail}\n    //       onChange={(e) => setSenderEmail(e.target.value)}\n    //     />\n    //     <input\n    //       type=\"text\"\n    //       placeholder=\"Receiver ID\"\n    //       value={receiverEmail}\n    //       onChange={(e) => setReceiverEmail(e.target.value)}\n    //     />\n    //   </div>\n    //   <div>\n    //     <input\n    //       type=\"text\"\n    //       placeholder=\"Message\"\n    //       value={message}\n    //       onChange={(e) => setMessage(e.target.value)}\n    //     />\n    //     <button onClick={handleSendMessage}>Send</button>\n    //   </div>\n    //   <div>\n    //     {receivedMessages.map((msg, index) => (\n    //       <div key={index}>\n    //         <strong>{msg.senderEmail}</strong>: {msg.message}{\" \"}\n    //         {msg.received ? \"(Read)\" : \"(Unread)\"}\n    //         {!msg.received && (\n    //           <button onClick={() => handleReadConfirmation(msg.messageId)}>\n    //             Mark as Read\n    //           </button>\n    //         )}\n    //       </div>\n    //     ))}\n    //   </div>\n    // </div>\n    <div className=\"chat-container\">\n      <div className=\"chat-messages\">\n        {receivedMessages.map((msg, index) => (\n          <div\n            key={index}\n            className={`message ${\n              msg.senderEmail === senderEmail ? \"sent-message\" : \"received-message\"\n            }`}\n          >\n            <strong>{msg.senderEmail}</strong>: {msg.message}\n            {msg.received ? \" (Read)\" : \" (Unread)\"}\n            {!msg.received && msg.senderEmail !== senderEmail && (\n              <button onClick={() => handleReadConfirmation(msg.messageId)}>Mark as Read</button>\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          placeholder=\"Your ID\"\n          value={senderEmail}\n          onChange={(e) => setSenderEmail(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Receiver ID\"\n          value={receiverEmail}\n          onChange={(e) => setReceiverEmail(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Message\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}