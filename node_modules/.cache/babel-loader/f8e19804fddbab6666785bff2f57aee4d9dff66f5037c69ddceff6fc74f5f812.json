{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n// Tạo một instance của axios\nconst api = axios.create({\n  baseURL: 'http://192.168.10.110:6969/v1',\n  withCredentials: true\n});\n\n// Thêm một interceptor vào request để thêm access token vào header\napi.interceptors.request.use(async config => {\n  const accessToken = localStorage.getItem('accessToken');\n  // if (checkTokenExpiration(accessToken)) {\n  //     accessToken = await refreshAccessToken();\n  //   }\n  if (accessToken) {\n    config.headers['token'] = `Bearer ${accessToken}`;\n  }\n  console.log('config:', config);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nlet isRefreshing = false;\n\n// Thêm một interceptor vào response để xử lý làm mới token\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    if (!isRefreshing) {\n      isRefreshing = true;\n      const newAccessToken = await refreshAccessToken();\n      isRefreshing = false;\n      if (newAccessToken) {\n        localStorage.setItem('accessToken', newAccessToken);\n        originalRequest.headers['token'] = `Bearer ${newAccessToken}`;\n        return api(originalRequest);\n      } else {\n        console.error('Failed to refresh token.');\n      }\n    }\n  }\n  return Promise.reject(error);\n});\nexport const checkTokenExpiration = token => {\n  if (!token) return true;\n  const {\n    exp\n  } = jwtDecode(token);\n  if (!exp) return true;\n  return Date.now() >= exp * 1000;\n};\nexport const refreshAccessToken = async () => {\n  try {\n    const response = await api.post(`/auth/refresh`);\n    const {\n      accessToken\n    } = response.data.newAccessToken;\n    console.log('refreshToken', response);\n    if (response.status === true) {\n      localStorage.setItem('accessToken', response.data.newAccessToken);\n    }\n    console.log('refreshToken', response);\n    return accessToken;\n  } catch (error) {\n    console.error(\"Unable to refresh token\", error.response.data.message);\n    return null;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","jwtDecode","api","create","baseURL","withCredentials","interceptors","request","use","config","accessToken","localStorage","getItem","headers","console","log","error","Promise","reject","isRefreshing","response","originalRequest","status","_retry","newAccessToken","refreshAccessToken","setItem","checkTokenExpiration","token","exp","Date","now","post","data","message"],"sources":["/Users/trinhdai/DATA/React_Native/BigShose2/client/website/src/api/api.js"],"sourcesContent":["import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n// Tạo một instance của axios\nconst api = axios.create({\n  baseURL: 'http://192.168.10.110:6969/v1',\n  withCredentials: true,\n});\n\n\n// Thêm một interceptor vào request để thêm access token vào header\napi.interceptors.request.use(\n  async (config) => {\n    const accessToken = localStorage.getItem('accessToken');\n    // if (checkTokenExpiration(accessToken)) {\n    //     accessToken = await refreshAccessToken();\n    //   }\n    if (accessToken) {\n      config.headers['token'] = `Bearer ${accessToken}`;\n    }\n    console.log('config:',config);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nlet isRefreshing = false;\n\n// Thêm một interceptor vào response để xử lý làm mới token\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      if (!isRefreshing) {\n        isRefreshing = true;\n        const newAccessToken = await refreshAccessToken();\n        isRefreshing = false;\n        \n        if (newAccessToken) {\n          localStorage.setItem('accessToken', newAccessToken);\n          originalRequest.headers['token'] = `Bearer ${newAccessToken}`;\n          return api(originalRequest);\n        } else {\n          console.error('Failed to refresh token.');\n        }\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n\n\n\nexport const checkTokenExpiration = (token) => {\n  if (!token) return true;\n  const { exp } = jwtDecode(token);\n  if (!exp) return true;\n  return (Date.now() >= exp * 1000);\n};\n\nexport const refreshAccessToken = async () => {\n  try {\n    const response = await api.post(`/auth/refresh`);\n    const { accessToken } = response.data.newAccessToken;\n    console.log('refreshToken',response)\n    if(response.status===true){\n      localStorage.setItem('accessToken', response.data.newAccessToken);\n    }\n    console.log('refreshToken',response)\n    return accessToken;\n  } catch (error) {\n    console.error(\"Unable to refresh token\", error.response.data.message);\n    return null;\n  }\n};\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}