{"ast":null,"code":"export const formatVND=amount=>{if(isNaN(amount)){return\"Invalid amount\";}return new Intl.NumberFormat(\"vi-VN\",{style:\"currency\",currency:\"VND\"}).format(amount);};export const truncate=(str,maxLength)=>{if(str.length>maxLength){return str.substring(0,maxLength)+'...';}return str;};export const normalizeFileName=fileName=>{return fileName.toLowerCase().replace(/\\s+/g,'-').replace(/[^a-zA-Z0-9.]/g,'_').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g,\"\");};export const convertToWords=amount=>{const numbers=[\"\",\"một\",\"hai\",\"ba\",\"bốn\",\"năm\",\"sáu\",\"bảy\",\"tám\",\"chín\"];const units=[\"\",\"mươi\",\"trăm\"];const scales=[\"\",\"nghìn\",\"triệu\",\"tỷ\"];const convertChunk=chunk=>{let result=\"\";for(let i=0;i<chunk.length;i++){const digit=parseInt(chunk[i]);if(chunk.length===3&&digit===1&&i===1){result+=\"mười \";}else if(chunk.length===2&&digit===1&&i===0){result+=\"mười \";}else if(digit!==0){result+=numbers[digit]+\" \"+units[chunk.length-i-1]+\" \";}}return result.trim();};const chunks=[];while(amount>0){chunks.push(amount%1000);amount=Math.floor(amount/1000);}let result=\"\";for(let i=chunks.length-1;i>=0;i--){const chunk=chunks[i];if(chunk!==0){result+=convertChunk(chunk.toString())+\" \"+scales[i]+\" \";}}return result.trim();};export const formatPrice=Price=>{const price=String(Price);const cleanedPrice=price.replace(/[^0-9.]/g,\"\");const normalizedPrice=cleanedPrice.replace(/\\.{2,}/g,\".\");const parts=normalizedPrice.split(\".\");if(parts[0].startsWith(\"0\")){parts[0]=parts[0].replace(/^0+/,\"\");}parts[0]=parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g,\".\");const formattedPrice=parts.join(\".\");return formattedPrice;};export const convertToVietnamTime=utcDateString=>{const utcDate=new Date(utcDateString);const vietnamTime=new Date(utcDate.toLocaleString('en-US',{timeZone:'Asia/Ho_Chi_Minh'}));const options={year:'numeric',month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit',second:'2-digit'};return vietnamTime.toLocaleString('vi-VN',options);};","map":{"version":3,"names":["formatVND","amount","isNaN","Intl","NumberFormat","style","currency","format","truncate","str","maxLength","length","substring","normalizeFileName","fileName","toLowerCase","replace","normalize","convertToWords","numbers","units","scales","convertChunk","chunk","result","i","digit","parseInt","trim","chunks","push","Math","floor","toString","formatPrice","Price","price","String","cleanedPrice","normalizedPrice","parts","split","startsWith","formattedPrice","join","convertToVietnamTime","utcDateString","utcDate","Date","vietnamTime","toLocaleString","timeZone","options","year","month","day","hour","minute","second"],"sources":["/Users/trinhdai/DATA/React_Native/BigShose2/client/website/src/utils/formart.js"],"sourcesContent":["export const formatVND=(amount)=> {\n    if (isNaN(amount)) {\n      return \"Invalid amount\";\n    }\n    return new Intl.NumberFormat(\"vi-VN\", {\n      style: \"currency\",\n      currency: \"VND\",\n    }).format(amount);\n  }\n  export const truncate = (str, maxLength) => {\n    if (str.length > maxLength) {\n      return str.substring(0, maxLength) + '...';\n    }\n    return str;\n  };\n\n  export const normalizeFileName = (fileName) => {\n    return fileName\n      .toLowerCase() \n      .replace(/\\s+/g, '-') \n      .replace(/[^a-zA-Z0-9.]/g, '_')\n      .normalize(\"NFD\") \n      .replace(/[\\u0300-\\u036f]/g, \"\"); \n  };\n\nexport const convertToWords = (amount) => {\n    const numbers = [\"\", \"một\", \"hai\", \"ba\", \"bốn\", \"năm\", \"sáu\", \"bảy\", \"tám\", \"chín\"];\n    const units = [\"\", \"mươi\", \"trăm\"];\n    const scales = [\"\", \"nghìn\", \"triệu\", \"tỷ\"];\n\n    const convertChunk = (chunk) => {\n      let result = \"\";\n      for (let i = 0; i < chunk.length; i++) {\n        const digit = parseInt(chunk[i]);\n        if (chunk.length === 3 && digit === 1 && i === 1) {\n            result += \"mười \";\n        } else if (chunk.length === 2 && digit === 1 && i === 0) {\n            result += \"mười \";\n        } else if (digit !== 0) {\n            result += numbers[digit] + \" \" + units[chunk.length - i - 1] + \" \";\n        }\n    }\n      return result.trim();\n  };\n\n\n    const chunks = [];\n    while (amount > 0) {\n        chunks.push(amount % 1000);\n        amount = Math.floor(amount / 1000);\n    }\n\n    let result = \"\";\n    for (let i = chunks.length - 1; i >= 0; i--) {\n        const chunk = chunks[i];\n        if (chunk !== 0) {\n            result += convertChunk(chunk.toString()) + \" \" + scales[i] + \" \";\n        }\n    }\n\n    return result.trim();\n};\n\nexport const formatPrice = (Price) => {\n  const price = String(Price);\n  const cleanedPrice = price.replace(/[^0-9.]/g, \"\");\n  const normalizedPrice = cleanedPrice.replace(/\\.{2,}/g, \".\");\n  const parts = normalizedPrice.split(\".\");\n  if (parts[0].startsWith(\"0\")) {\n    parts[0] = parts[0].replace(/^0+/, \"\");\n  }\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n  const formattedPrice = parts.join(\".\");\n  return formattedPrice;\n};\nexport const convertToVietnamTime = (utcDateString) => {\n  const utcDate = new Date(utcDateString);\n  const vietnamTime = new Date(utcDate.toLocaleString('en-US', { timeZone: 'Asia/Ho_Chi_Minh' }));\n  const options = {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n  };\n  return vietnamTime.toLocaleString('vi-VN', options);\n};\n\n  \n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}