{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n// Tạo một instance của axios\nconst api = axios.create({\n  baseURL: 'http://192.168.10.110:6969/v1',\n  withCredentials: true\n});\n\n// Thêm một interceptor vào request để thêm access token vào header\napi.interceptors.request.use(async config => {\n  const accessToken = localStorage.getItem('accessToken');\n  // if (checkTokenExpiration(accessToken)) {\n  //     accessToken = await refreshAccessToken();\n  //   }\n  if (accessToken) {\n    config.headers['token'] = `Bearer ${accessToken}`;\n  }\n  console.log('config:', config);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nlet isRefreshing = false;\n\n// Thêm một interceptor vào response để xử lý làm mới token\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n  console.log('originalRequest', originalRequest);\n  // if (error.response.status === 401 && !originalRequest._retry) {\n  //   originalRequest._retry = true;\n\n  //   if (!isRefreshing) {\n  //     isRefreshing = true;\n  //     const newAccessToken = await refreshAccessToken();\n  //     isRefreshing = false;\n\n  //     if (newAccessToken) {\n  //       localStorage.setItem('accessToken', newAccessToken);\n  //       originalRequest.headers['token'] = `Bearer ${newAccessToken}`;\n  //       return api(originalRequest);\n  //     } else {\n  //       console.error('Failed to refresh token.');\n  //     }\n  //   }\n  // }\n  return Promise.reject(error);\n});\nexport const checkTokenExpiration = token => {\n  if (!token) return true;\n  const {\n    exp\n  } = jwtDecode(token);\n  if (!exp) return true;\n  return Date.now() >= exp * 1000;\n};\nexport const refreshAccessToken = async () => {\n  try {\n    const refreshToken = getCookie('refreshToken');\n    const response = await api.post(`/auth/refresh`);\n    const {\n      accessToken\n    } = response.data.newAccessToken;\n    console.log('refreshToken', refreshToken);\n    // if(response.status===true){\n    //   localStorage.setItem('accessToken', response.data.newAccessToken);\n    // }\n    console.log('response', response);\n    // return accessToken;\n  } catch (error) {\n    console.error(\"Unable to refresh token\", error.response.data.message);\n    return null;\n  }\n};\nconsole.log('refreshToken', document.cookie);\nfunction getCookie(name) {\n  const cookieString = document.cookie;\n  const cookies = cookieString.split('; ');\n  for (let cookie of cookies) {\n    const [cookieName, cookieValue] = cookie.split('=');\n    if (cookieName === name) {\n      return cookieValue;\n    }\n  }\n  return null;\n}\nexport default api;","map":{"version":3,"names":["axios","jwtDecode","api","create","baseURL","withCredentials","interceptors","request","use","config","accessToken","localStorage","getItem","headers","console","log","error","Promise","reject","isRefreshing","response","originalRequest","checkTokenExpiration","token","exp","Date","now","refreshAccessToken","refreshToken","getCookie","post","data","newAccessToken","message","document","cookie","name","cookieString","cookies","split","cookieName","cookieValue"],"sources":["/Users/trinhdai/DATA/React_Native/BigShose2/client/website/src/api/api.js"],"sourcesContent":["import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n// Tạo một instance của axios\nconst api = axios.create({\n  baseURL: 'http://192.168.10.110:6969/v1',\n  withCredentials: true,\n});\n\n\n// Thêm một interceptor vào request để thêm access token vào header\napi.interceptors.request.use(\n  async (config) => {\n    const accessToken = localStorage.getItem('accessToken');\n    // if (checkTokenExpiration(accessToken)) {\n    //     accessToken = await refreshAccessToken();\n    //   }\n    if (accessToken) {\n      config.headers['token'] = `Bearer ${accessToken}`;\n    }\n    console.log('config:',config);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nlet isRefreshing = false;\n\n// Thêm một interceptor vào response để xử lý làm mới token\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    console.log('originalRequest',originalRequest)\n    // if (error.response.status === 401 && !originalRequest._retry) {\n    //   originalRequest._retry = true;\n\n    //   if (!isRefreshing) {\n    //     isRefreshing = true;\n    //     const newAccessToken = await refreshAccessToken();\n    //     isRefreshing = false;\n        \n    //     if (newAccessToken) {\n    //       localStorage.setItem('accessToken', newAccessToken);\n    //       originalRequest.headers['token'] = `Bearer ${newAccessToken}`;\n    //       return api(originalRequest);\n    //     } else {\n    //       console.error('Failed to refresh token.');\n    //     }\n    //   }\n    // }\n    return Promise.reject(error);\n  }\n);\n\n\n\n\nexport const checkTokenExpiration = (token) => {\n  if (!token) return true;\n  const { exp } = jwtDecode(token);\n  if (!exp) return true;\n  return (Date.now() >= exp * 1000);\n};\n\nexport const refreshAccessToken = async () => {\n  try {\n    const refreshToken = getCookie('refreshToken');\n    const response = await api.post(`/auth/refresh`);\n\n    const { accessToken } = response.data.newAccessToken;\n    console.log('refreshToken',refreshToken)\n    // if(response.status===true){\n    //   localStorage.setItem('accessToken', response.data.newAccessToken);\n    // }\n    console.log('response',response)\n    // return accessToken;\n  } catch (error) {\n    console.error(\"Unable to refresh token\", error.response.data.message);\n    return null;\n  }\n};\nconsole.log('refreshToken',document.cookie)\nfunction getCookie(name) {\n  const cookieString = document.cookie;\n  const cookies = cookieString.split('; ');\n  for (let cookie of cookies) {\n      const [cookieName, cookieValue] = cookie.split('=');\n      if (cookieName === name) {\n          return cookieValue;\n      }\n  }\n  return null;\n}\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}