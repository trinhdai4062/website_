{"ast":null,"code":"export const formatVND = amount => {\n  if (isNaN(amount)) {\n    return \"Invalid amount\";\n  }\n  return new Intl.NumberFormat(\"vi-VN\", {\n    style: \"currency\",\n    currency: \"VND\"\n  }).format(amount);\n};\nexport const truncate = (str, maxLength) => {\n  if (str.length > maxLength) {\n    return str.substring(0, maxLength) + '...';\n  }\n  return str;\n};\nexport const normalizeFileName = fileName => {\n  return fileName.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-zA-Z0-9.]/g, '_').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n};\nexport const convertToWords = amount => {\n  const numbers = [\"\", \"một\", \"hai\", \"ba\", \"bốn\", \"năm\", \"sáu\", \"bảy\", \"tám\", \"chín\"];\n  const units = [\"\", \"mươi\", \"trăm\"];\n  const scales = [\"\", \"nghìn\", \"triệu\", \"tỷ\"];\n  const convertChunk = chunk => {\n    let result = \"\";\n    for (let i = 0; i < chunk.length; i++) {\n      const digit = parseInt(chunk[i]);\n      if (chunk.length === 3 && digit === 1 && i === 1) {\n        result += \"mười \";\n      } else if (chunk.length === 2 && digit === 1 && i === 0) {\n        result += \"mười \";\n      } else if (digit !== 0) {\n        result += numbers[digit] + \" \" + units[chunk.length - i - 1] + \" \";\n      }\n    }\n    return result.trim();\n  };\n  const chunks = [];\n  while (amount > 0) {\n    chunks.push(amount % 1000);\n    amount = Math.floor(amount / 1000);\n  }\n  let result = \"\";\n  for (let i = chunks.length - 1; i >= 0; i--) {\n    const chunk = chunks[i];\n    if (chunk !== 0) {\n      result += convertChunk(chunk.toString()) + \" \" + scales[i] + \" \";\n    }\n  }\n  return result.trim();\n};\nexport const formatPrice = price => {\n  const cleanedPrice = price.replace(/[^0-9.]/g, \"\");\n  const normalizedPrice = cleanedPrice.replace(/\\.{2,}/g, \".\");\n  const parts = normalizedPrice.split(\".\");\n  if (parts[0].startsWith(\"0\")) {\n    parts[0] = parts[0].replace(/^0+/, \"\");\n  }\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n  const formattedPrice = parts.join(\".\");\n  return formattedPrice;\n};\nexport const convertToVietnamTime = utcDateString => {\n  const utcDate = new Date(utcDateString);\n  const vietnamOffset = 7 * 60;\n  const vietnamTime = new Date(utcDate.getTime() - vietnamOffset * 60 * 1000);\n  const options = {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  };\n  return vietnamTime.toLocaleString('vi-VN', options);\n};","map":{"version":3,"names":["formatVND","amount","isNaN","Intl","NumberFormat","style","currency","format","truncate","str","maxLength","length","substring","normalizeFileName","fileName","toLowerCase","replace","normalize","convertToWords","numbers","units","scales","convertChunk","chunk","result","i","digit","parseInt","trim","chunks","push","Math","floor","toString","formatPrice","price","cleanedPrice","normalizedPrice","parts","split","startsWith","formattedPrice","join","convertToVietnamTime","utcDateString","utcDate","Date","vietnamOffset","vietnamTime","getTime","options","year","month","day","hour","minute","second","toLocaleString"],"sources":["/Users/trinhdai/DATA/React_Native/BigShose2/client/website/src/utils/formart.js"],"sourcesContent":["export const formatVND=(amount)=> {\n    if (isNaN(amount)) {\n      return \"Invalid amount\";\n    }\n    return new Intl.NumberFormat(\"vi-VN\", {\n      style: \"currency\",\n      currency: \"VND\",\n    }).format(amount);\n  }\n  export const truncate = (str, maxLength) => {\n    if (str.length > maxLength) {\n      return str.substring(0, maxLength) + '...';\n    }\n    return str;\n  };\n\n  export const normalizeFileName = (fileName) => {\n    return fileName\n      .toLowerCase() \n      .replace(/\\s+/g, '-') \n      .replace(/[^a-zA-Z0-9.]/g, '_')\n      .normalize(\"NFD\") \n      .replace(/[\\u0300-\\u036f]/g, \"\"); \n  };\n\nexport const convertToWords = (amount) => {\n    const numbers = [\"\", \"một\", \"hai\", \"ba\", \"bốn\", \"năm\", \"sáu\", \"bảy\", \"tám\", \"chín\"];\n    const units = [\"\", \"mươi\", \"trăm\"];\n    const scales = [\"\", \"nghìn\", \"triệu\", \"tỷ\"];\n\n    const convertChunk = (chunk) => {\n      let result = \"\";\n      for (let i = 0; i < chunk.length; i++) {\n        const digit = parseInt(chunk[i]);\n        if (chunk.length === 3 && digit === 1 && i === 1) {\n            result += \"mười \";\n        } else if (chunk.length === 2 && digit === 1 && i === 0) {\n            result += \"mười \";\n        } else if (digit !== 0) {\n            result += numbers[digit] + \" \" + units[chunk.length - i - 1] + \" \";\n        }\n    }\n      return result.trim();\n  };\n\n\n    const chunks = [];\n    while (amount > 0) {\n        chunks.push(amount % 1000);\n        amount = Math.floor(amount / 1000);\n    }\n\n    let result = \"\";\n    for (let i = chunks.length - 1; i >= 0; i--) {\n        const chunk = chunks[i];\n        if (chunk !== 0) {\n            result += convertChunk(chunk.toString()) + \" \" + scales[i] + \" \";\n        }\n    }\n\n    return result.trim();\n};\n\nexport const formatPrice = (price) => {\n  const cleanedPrice = price.replace(/[^0-9.]/g, \"\");\n  const normalizedPrice = cleanedPrice.replace(/\\.{2,}/g, \".\");\n  const parts = normalizedPrice.split(\".\");\n  if (parts[0].startsWith(\"0\")) {\n    parts[0] = parts[0].replace(/^0+/, \"\");\n  }\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n  const formattedPrice = parts.join(\".\");\n  return formattedPrice;\n};\nexport const convertToVietnamTime = (utcDateString) => {\n  const utcDate = new Date(utcDateString);\n  const vietnamOffset = 7 * 60;\n  const vietnamTime = new Date(utcDate.getTime() - vietnamOffset * 60 * 1000);\n  const options = {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n  };\n  return vietnamTime.toLocaleString('vi-VN', options);\n};\n\n  \n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}