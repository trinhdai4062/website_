{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n// Tạo một instance của axios\nconst api = axios.create({\n  baseURL: 'http://192.168.10.110:6969/v1',\n  withCredentials: true\n});\nconst refreshAccessToken = async () => {\n  try {\n    const response = await axios.post(`/auth/refresh`, {\n      withCredentials: true\n    });\n    const {\n      accessToken\n    } = response.data.newAccessToken;\n    console.log('newAccessToken', response);\n    if (response.status === true) {\n      localStorage.setItem('accessToken', response.data.newAccessToken);\n    }\n    return accessToken;\n  } catch (error) {\n    console.error(\"Unable to refresh token\", error.response.data.message);\n    return null;\n  }\n};\n\n// Thêm một interceptor vào request để thêm access token vào header\napi.interceptors.request.use(async config => {\n  const accessToken = localStorage.getItem('accessToken');\n  const date = new Date();\n  const exp = jwtDecode(accessToken);\n  if (exp.exp < date.getTime() / 1000) {\n    refreshAccessToken();\n    console.log('exp.exp', exp.exp);\n    console.log('date:', date.getTime() / 1000);\n  }\n  if (accessToken) {\n    config.headers['token'] = `Bearer ${accessToken}`;\n  }\n  console.log('config:', config);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nlet isRefreshing = false;\n\n// Thêm một interceptor vào response để xử lý làm mới token\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n  console.log('originalRequest', originalRequest);\n  // if (error.response.status === 401 && !originalRequest._retry) {\n  //   originalRequest._retry = true;\n\n  //   if (!isRefreshing) {\n  //     isRefreshing = true;\n  //     const newAccessToken = await refreshAccessToken();\n  //     isRefreshing = false;\n\n  //     if (newAccessToken) {\n  //       localStorage.setItem('accessToken', newAccessToken);\n  //       originalRequest.headers['token'] = `Bearer ${newAccessToken}`;\n  //       return api(originalRequest);\n  //     } else {\n  //       console.error('Failed to refresh token.');\n  //     }\n  //   }\n  // }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","jwtDecode","api","create","baseURL","withCredentials","refreshAccessToken","response","post","accessToken","data","newAccessToken","console","log","status","localStorage","setItem","error","message","interceptors","request","use","config","getItem","date","Date","exp","getTime","headers","Promise","reject","isRefreshing","originalRequest"],"sources":["/Users/trinhdai/DATA/React_Native/BigShose2/client/website/src/api/api.js"],"sourcesContent":["import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n// Tạo một instance của axios\nconst api = axios.create({\n  baseURL: 'http://192.168.10.110:6969/v1',\n  withCredentials: true,\n});\n\nconst refreshAccessToken = async () => {\n  try {\n    const response = await axios.post(`/auth/refresh`,{withCredentials:true});\n    const { accessToken } = response.data.newAccessToken;\n    console.log('newAccessToken',response)\n    if(response.status===true){\n      localStorage.setItem('accessToken', response.data.newAccessToken);\n    }\n    return accessToken;\n  } catch (error) {\n    console.error(\"Unable to refresh token\", error.response.data.message);\n    return null;\n  }\n};\n\n// Thêm một interceptor vào request để thêm access token vào header\napi.interceptors.request.use(\n  async (config) => {\n    const accessToken = localStorage.getItem('accessToken');\n    const date=new Date();\n    const exp  = jwtDecode(accessToken);\n    if(exp.exp<date.getTime()/1000){\n      refreshAccessToken()\n      console.log('exp.exp',exp.exp)\n      console.log('date:',date.getTime()/1000)\n    }\n    if (accessToken) {\n      config.headers['token'] = `Bearer ${accessToken}`;\n    }\n    console.log('config:',config);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nlet isRefreshing = false;\n\n// Thêm một interceptor vào response để xử lý làm mới token\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    console.log('originalRequest',originalRequest)\n    // if (error.response.status === 401 && !originalRequest._retry) {\n    //   originalRequest._retry = true;\n\n    //   if (!isRefreshing) {\n    //     isRefreshing = true;\n    //     const newAccessToken = await refreshAccessToken();\n    //     isRefreshing = false;\n        \n    //     if (newAccessToken) {\n    //       localStorage.setItem('accessToken', newAccessToken);\n    //       originalRequest.headers['token'] = `Bearer ${newAccessToken}`;\n    //       return api(originalRequest);\n    //     } else {\n    //       console.error('Failed to refresh token.');\n    //     }\n    //   }\n    // }\n    return Promise.reject(error);\n  }\n);\n\n\n\n\n\n\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;;AAEtC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,+BAA+B;EACxCC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAE,eAAc,EAAC;MAACH,eAAe,EAAC;IAAI,CAAC,CAAC;IACzE,MAAM;MAAEI;IAAY,CAAC,GAAGF,QAAQ,CAACG,IAAI,CAACC,cAAc;IACpDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAACN,QAAQ,CAAC;IACtC,IAAGA,QAAQ,CAACO,MAAM,KAAG,IAAI,EAAC;MACxBC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAET,QAAQ,CAACG,IAAI,CAACC,cAAc,CAAC;IACnE;IACA,OAAOF,WAAW;EACpB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACV,QAAQ,CAACG,IAAI,CAACQ,OAAO,CAAC;IACrE,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACAhB,GAAG,CAACiB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1B,MAAOC,MAAM,IAAK;EAChB,MAAMb,WAAW,GAAGM,YAAY,CAACQ,OAAO,CAAC,aAAa,CAAC;EACvD,MAAMC,IAAI,GAAC,IAAIC,IAAI,CAAC,CAAC;EACrB,MAAMC,GAAG,GAAIzB,SAAS,CAACQ,WAAW,CAAC;EACnC,IAAGiB,GAAG,CAACA,GAAG,GAACF,IAAI,CAACG,OAAO,CAAC,CAAC,GAAC,IAAI,EAAC;IAC7BrB,kBAAkB,CAAC,CAAC;IACpBM,OAAO,CAACC,GAAG,CAAC,SAAS,EAACa,GAAG,CAACA,GAAG,CAAC;IAC9Bd,OAAO,CAACC,GAAG,CAAC,OAAO,EAACW,IAAI,CAACG,OAAO,CAAC,CAAC,GAAC,IAAI,CAAC;EAC1C;EACA,IAAIlB,WAAW,EAAE;IACfa,MAAM,CAACM,OAAO,CAAC,OAAO,CAAC,GAAI,UAASnB,WAAY,EAAC;EACnD;EACAG,OAAO,CAACC,GAAG,CAAC,SAAS,EAACS,MAAM,CAAC;EAC7B,OAAOA,MAAM;AACf,CAAC,EACAL,KAAK,IAAK;EACT,OAAOY,OAAO,CAACC,MAAM,CAACb,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,IAAIc,YAAY,GAAG,KAAK;;AAExB;AACA7B,GAAG,CAACiB,YAAY,CAACZ,QAAQ,CAACc,GAAG,CAC1Bd,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOU,KAAK,IAAK;EACf,MAAMe,eAAe,GAAGf,KAAK,CAACK,MAAM;EACpCV,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAACmB,eAAe,CAAC;EAC9C;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOH,OAAO,CAACC,MAAM,CAACb,KAAK,CAAC;AAC9B,CACF,CAAC;AAQD,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}